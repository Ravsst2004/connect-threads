// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  username  String    @unique
  name      String
  email     String    @unique
  password  String
  image     String?
  phone     String?
  bio       String?
  threads   Thread[]
  comments  Comment[]
  roleId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]

  role Role @relation(fields: [roleId], references: [id])
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model Thread {
  id         String    @id @default(cuid())
  authorId   String
  content    String    @db.Text
  totalLikes Int
  image      String[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  comments   Comment[]
  likes      Like[]

  author User @relation(fields: [authorId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  threadId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  thread Thread @relation(fields: [threadId], references: [id])
}

model Like {
  userId    String
  threadId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  thread Thread @relation(fields: [threadId], references: [id])

  @@id([userId, threadId])
}
