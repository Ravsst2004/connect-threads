// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(cuid())
  username       String?   @unique
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  password       String?
  image          String?
  phone          String?
  bio            String?
  role           String    @default("user")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  totalFollowers Int       @default(0) @map("total_followers")
  totalFollowing Int       @default(0) @map("total_following")
  threads        Thread[]
  comments       Comment[]
  likes          Like[]
  Account        Account[]
  Follow         Follow[]

  following         Follow[]       @relation("Following")
  followers         Follow[]       @relation("Followers")
  Notification      Notification[]
  notificationsSent Notification[] @relation("Sender")
}

model Thread {
  id         String    @id @default(cuid())
  authorId   String
  content    String    @db.Text
  totalLikes Int       @default(0) @map("total_likes")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  images     String[]
  comments   Comment[]
  likes      Like[]

  author User @relation(fields: [authorId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String // User yang menerima notifikasi
  senderId  String // User yang mengirim notifikasi
  type      String // Jenis notifikasi, seperti "follow", "like", dll.
  content   String? // Konten notifikasi (misal: "UserX mulai mengikuti Anda")
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false) // Status apakah notifikasi sudah dibaca

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade) // Relasi ke user yang menerima notifikasi
  sender User @relation("Sender", fields: [senderId], references: [id]) // Relasi ke user yang mengirim notifikasi
}

model Comment {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  threadId  String   @map("thread_id")
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  thread Thread @relation(fields: [threadId], references: [id])
}

model Follow {
  followerId  String
  followingId String

  follower  User    @relation("Following", fields: [followerId], references: [id])
  following User    @relation("Followers", fields: [followingId], references: [id])
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?

  @@id([followerId, followingId])
}

model Like {
  userId    String
  threadId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  thread Thread @relation(fields: [threadId], references: [id])

  @@id([userId, threadId])
}
